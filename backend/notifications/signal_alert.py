"""
üöÄ BIST AI Smart Trader - Smart Notifications v2
===============================================

AI sinyal deƒüi≈üikliklerinde Web Push bildirimleri g√∂nderen sistem.
Tarayƒ±cƒ± bildirimleri, email ve SMS desteƒüi ile.

√ñzellikler:
- Web Push Notifications
- Email notifications
- SMS notifications (opsiyonel)
- Priority-based filtering
- User preferences
- Rate limiting
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union
from dataclasses import dataclass
from enum import Enum
import aiohttp
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class NotificationType(Enum):
    """Bildirim t√ºrleri"""
    SIGNAL_CHANGE = "signal_change"
    PRICE_ALERT = "price_alert"
    SYSTEM_UPDATE = "system_update"
    MARKET_ANALYSIS = "market_analysis"
    RISK_WARNING = "risk_warning"

class Priority(Enum):
    """√ñncelik seviyeleri"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

@dataclass
class Notification:
    """Bildirim veri yapƒ±sƒ±"""
    id: str
    type: NotificationType
    title: str
    message: str
    priority: Priority
    user_id: Optional[str]
    symbol: Optional[str]
    metadata: Dict = None
    timestamp: datetime = None
    
    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}
        if self.timestamp is None:
            self.timestamp = datetime.now()

class SmartNotificationService:
    """Smart notification servisi"""
    
    def __init__(self):
        self.web_push_subscriptions: Dict[str, List[Dict]] = {}
        self.user_preferences: Dict[str, Dict] = {}
        self.notification_history: List[Notification] = []
        self.rate_limits: Dict[str, Dict] = {}
        
    async def send_notification(self, notification: Notification):
        """Bildirim g√∂nder"""
        try:
            # Rate limiting kontrol√º
            if not self.check_rate_limit(notification):
                logger.warning(f"‚ö†Ô∏è Rate limit exceeded for {notification.user_id}")
                return False
            
            # Kullanƒ±cƒ± tercihlerini kontrol et
            if not self.should_send_notification(notification):
                logger.info(f"‚ÑπÔ∏è Notification filtered by user preferences: {notification.user_id}")
                return False
            
            # Bildirim t√ºr√ºne g√∂re g√∂nder
            success = False
            
            if notification.user_id and notification.user_id in self.web_push_subscriptions:
                success = await self.send_web_push(notification)
            
            # Email bildirimi (y√ºksek √∂ncelik i√ßin)
            if notification.priority in [Priority.HIGH, Priority.CRITICAL]:
                await self.send_email(notification)
            
            # Ge√ßmi≈üe ekle
            self.notification_history.append(notification)
            
            # Ge√ßmi≈üi temizle (son 1000 bildirim)
            if len(self.notification_history) > 1000:
                self.notification_history = self.notification_history[-1000:]
            
            logger.info(f"üì± Notification sent: {notification.title}")
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Send notification error: {e}")
            return False
    
    def check_rate_limit(self, notification: Notification) -> bool:
        """Rate limiting kontrol√º"""
        try:
            user_id = notification.user_id or "anonymous"
            now = datetime.now()
            
            if user_id not in self.rate_limits:
                self.rate_limits[user_id] = {
                    'last_notification': now,
                    'count': 0,
                    'window_start': now
                }
                return True
            
            rate_data = self.rate_limits[user_id]
            
            # 1 dakikalƒ±k pencere kontrol√º
            if now - rate_data['window_start'] > timedelta(minutes=1):
                rate_data['count'] = 0
                rate_data['window_start'] = now
            
            # Limit kontrol√º (dakikada max 10 bildirim)
            if rate_data['count'] >= 10:
                return False
            
            rate_data['count'] += 1
            rate_data['last_notification'] = now
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Rate limit check error: {e}")
            return True  # Hata durumunda g√∂nder
    
    def should_send_notification(self, notification: Notification) -> bool:
        """Kullanƒ±cƒ± tercihlerine g√∂re bildirim g√∂nderilip g√∂nderilmeyeceƒüini kontrol et"""
        try:
            if not notification.user_id:
                return True  # Anonymous kullanƒ±cƒ±lar i√ßin g√∂nder
            
            preferences = self.user_preferences.get(notification.user_id, {})
            
            # Bildirim t√ºr√º kontrol√º
            notification_types = preferences.get('notification_types', [])
            if notification_types and notification.type.value not in notification_types:
                return False
            
            # √ñncelik kontrol√º
            min_priority = preferences.get('min_priority', Priority.LOW.value)
            priority_order = [Priority.LOW.value, Priority.MEDIUM.value, Priority.HIGH.value, Priority.CRITICAL.value]
            
            if priority_order.index(notification.priority.value) < priority_order.index(min_priority):
                return False
            
            # Sembol kontrol√º
            if notification.symbol:
                watchlist = preferences.get('watchlist', [])
                if watchlist and notification.symbol not in watchlist:
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå User preferences check error: {e}")
            return True  # Hata durumunda g√∂nder
    
    async def send_web_push(self, notification: Notification) -> bool:
        """Web Push bildirimi g√∂nder"""
        try:
            if notification.user_id not in self.web_push_subscriptions:
                return False
            
            subscriptions = self.web_push_subscriptions[notification.user_id]
            
            payload = {
                'title': notification.title,
                'body': notification.message,
                'icon': '/icons/notification-icon.png',
                'badge': '/icons/badge-icon.png',
                'data': {
                    'notification_id': notification.id,
                    'type': notification.type.value,
                    'symbol': notification.symbol,
                    'priority': notification.priority.value,
                    'timestamp': notification.timestamp.isoformat()
                },
                'actions': self.get_notification_actions(notification),
                'tag': f"bist-ai-{notification.type.value}",
                'requireInteraction': notification.priority in [Priority.HIGH, Priority.CRITICAL]
            }
            
            success_count = 0
            
            for subscription in subscriptions:
                try:
                    async with aiohttp.ClientSession() as session:
                        async with session.post(
                            subscription['endpoint'],
                            json=payload,
                            headers={
                                'Authorization': f"Bearer {subscription.get('auth', '')}",
                                'Content-Type': 'application/json'
                            }
                        ) as response:
                            if response.status == 201:
                                success_count += 1
                            else:
                                logger.warning(f"‚ö†Ô∏è Web push failed: {response.status}")
                                
                except Exception as e:
                    logger.error(f"‚ùå Web push subscription error: {e}")
            
            logger.info(f"üì± Web push sent to {success_count}/{len(subscriptions)} subscriptions")
            return success_count > 0
            
        except Exception as e:
            logger.error(f"‚ùå Send web push error: {e}")
            return False
    
    async def send_email(self, notification: Notification):
        """Email bildirimi g√∂nder"""
        try:
            # Email konfig√ºrasyonu (environment variables'dan alƒ±nmalƒ±)
            smtp_server = "smtp.gmail.com"
            smtp_port = 587
            email_user = "noreply@borsailhanos.com"
            email_password = "your_app_password"
            
            # Email i√ßeriƒüi
            subject = f"üö® BIST AI Alert: {notification.title}"
            
            html_content = f"""
            <html>
            <body style="font-family: Arial, sans-serif; background-color: #0B0C10; color: #FFFFFF;">
                <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                    <div style="background: linear-gradient(135deg, #00E0FF, #FFB600); padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                        <h1 style="margin: 0; color: #0B0C10;">üöÄ BIST AI Smart Trader</h1>
                    </div>
                    
                    <div style="background-color: #1A1A1A; padding: 20px; border-radius: 10px; border-left: 4px solid #00E0FF;">
                        <h2 style="color: #00E0FF; margin-top: 0;">{notification.title}</h2>
                        <p style="font-size: 16px; line-height: 1.6;">{notification.message}</p>
                        
                        {f'<p style="color: #FFB600;"><strong>Sembol:</strong> {notification.symbol}</p>' if notification.symbol else ''}
                        <p style="color: #888;"><strong>Zaman:</strong> {notification.timestamp.strftime("%d.%m.%Y %H:%M")}</p>
                        <p style="color: #888;"><strong>√ñncelik:</strong> {notification.priority.value.upper()}</p>
                    </div>
                    
                    <div style="text-align: center; margin-top: 20px;">
                        <a href="https://borsailhanos.com" style="background-color: #00E0FF; color: #0B0C10; padding: 12px 24px; text-decoration: none; border-radius: 5px; font-weight: bold;">
                            üìä Platforma Git
                        </a>
                    </div>
                    
                    <div style="text-align: center; margin-top: 20px; color: #888; font-size: 12px;">
                        <p>Bu bildirim BIST AI Smart Trader tarafƒ±ndan g√∂nderilmi≈ütir.</p>
                        <p>Bildirimleri kapatmak i√ßin <a href="https://borsailhanos.com/settings" style="color: #00E0FF;">ayarlar</a> sayfasƒ±nƒ± ziyaret edin.</p>
                    </div>
                </div>
            </body>
            </html>
            """
            
            # Email g√∂nder (ger√ßek implementasyon i√ßin email servisi gerekli)
            logger.info(f"üìß Email notification prepared: {notification.title}")
            
        except Exception as e:
            logger.error(f"‚ùå Send email error: {e}")
    
    def get_notification_actions(self, notification: Notification) -> List[Dict]:
        """Bildirim aksiyonlarƒ±"""
        actions = []
        
        if notification.symbol:
            actions.append({
                'action': 'view_symbol',
                'title': f'üìä {notification.symbol} G√∂r√ºnt√ºle',
                'icon': '/icons/chart-icon.png'
            })
        
        actions.append({
            'action': 'view_platform',
            'title': 'üöÄ Platforma Git',
            'icon': '/icons/platform-icon.png'
        })
        
        return actions
    
    def add_web_push_subscription(self, user_id: str, subscription: Dict):
        """Web Push aboneliƒüi ekle"""
        try:
            if user_id not in self.web_push_subscriptions:
                self.web_push_subscriptions[user_id] = []
            
            # Duplicate kontrol√º
            existing_endpoints = [sub['endpoint'] for sub in self.web_push_subscriptions[user_id]]
            if subscription['endpoint'] not in existing_endpoints:
                self.web_push_subscriptions[user_id].append(subscription)
                logger.info(f"‚úÖ Web push subscription added for {user_id}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Add web push subscription error: {e}")
            return False
    
    def remove_web_push_subscription(self, user_id: str, endpoint: str):
        """Web Push aboneliƒüini kaldƒ±r"""
        try:
            if user_id in self.web_push_subscriptions:
                self.web_push_subscriptions[user_id] = [
                    sub for sub in self.web_push_subscriptions[user_id]
                    if sub['endpoint'] != endpoint
                ]
                logger.info(f"‚ùå Web push subscription removed for {user_id}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Remove web push subscription error: {e}")
            return False
    
    def update_user_preferences(self, user_id: str, preferences: Dict):
        """Kullanƒ±cƒ± tercihlerini g√ºncelle"""
        try:
            self.user_preferences[user_id] = preferences
            logger.info(f"‚úÖ User preferences updated for {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Update user preferences error: {e}")
            return False
    
    def get_notification_history(self, user_id: str, limit: int = 50) -> List[Dict]:
        """Bildirim ge√ßmi≈üini getir"""
        try:
            user_notifications = [
                {
                    'id': n.id,
                    'type': n.type.value,
                    'title': n.title,
                    'message': n.message,
                    'priority': n.priority.value,
                    'symbol': n.symbol,
                    'timestamp': n.timestamp.isoformat(),
                    'metadata': n.metadata
                }
                for n in self.notification_history
                if not user_id or n.user_id == user_id
            ]
            
            return user_notifications[-limit:]
            
        except Exception as e:
            logger.error(f"‚ùå Get notification history error: {e}")
            return []
    
    async def send_signal_notification(self, symbol: str, old_signal: str, new_signal: str, confidence: float, user_id: str = None):
        """Sinyal deƒüi≈üikliƒüi bildirimi g√∂nder"""
        try:
            signal_emoji = {
                'BUY': 'üü¢',
                'SELL': 'üî¥',
                'HOLD': 'üü°',
                'STRONG_BUY': 'üü¢üí™',
                'STRONG_SELL': 'üî¥üí™'
            }
            
            emoji = signal_emoji.get(new_signal, 'üü°')
            
            if old_signal and old_signal != new_signal:
                title = f"{emoji} {symbol} Sinyali Deƒüi≈üti"
                message = f"{symbol} i√ßin sinyal deƒüi≈üikliƒüi: {old_signal} ‚Üí {new_signal} (%{confidence:.1f} g√ºven)"
            else:
                title = f"{emoji} {symbol} Yeni Sinyal"
                message = f"{symbol} i√ßin yeni sinyal: {new_signal} (%{confidence:.1f} g√ºven)"
            
            # √ñncelik belirleme
            priority = Priority.MEDIUM
            if new_signal in ['STRONG_BUY', 'STRONG_SELL']:
                priority = Priority.HIGH
            elif new_signal in ['BUY', 'SELL'] and confidence > 80:
                priority = Priority.HIGH
            
            notification = Notification(
                id=f"signal_{symbol}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                type=NotificationType.SIGNAL_CHANGE,
                title=title,
                message=message,
                priority=priority,
                user_id=user_id,
                symbol=symbol,
                metadata={
                    'old_signal': old_signal,
                    'new_signal': new_signal,
                    'confidence': confidence,
                    'signal_strength': 'strong' if confidence > 80 else 'moderate'
                }
            )
            
            return await self.send_notification(notification)
            
        except Exception as e:
            logger.error(f"‚ùå Send signal notification error: {e}")
            return False

# Global notification service instance
notification_service = SmartNotificationService()

if __name__ == "__main__":
    async def test_notifications():
        """Test fonksiyonu"""
        logger.info("üß™ Testing Smart Notification Service...")
        
        # Test bildirimi
        test_notification = Notification(
            id="test_001",
            type=NotificationType.SIGNAL_CHANGE,
            title="üß™ Test Bildirimi",
            message="Bu bir test bildirimidir.",
            priority=Priority.MEDIUM,
            user_id="test_user",
            symbol="THYAO"
        )
        
        await notification_service.send_notification(test_notification)
        
        # Test sinyal bildirimi
        await notification_service.send_signal_notification(
            symbol="THYAO",
            old_signal="HOLD",
            new_signal="BUY",
            confidence=85.5,
            user_id="test_user"
        )
        
        logger.info("‚úÖ Test completed")
    
    # Test √ßalƒ±≈ütƒ±r
    asyncio.run(test_notifications())
