import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
import logging
from typing import List, Dict, Tuple, Optional
import warnings
warnings.filterwarnings('ignore')

from bist_smart_indicator import BISTSmartIndicator
from visual_analyzer import VisualAnalyzer

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class BISTSmartDashboard:
    """
    BIST Smart Indicator + G√∂rsel Analiz Dashboard
    - Tek sayfada t√ºm analizler
    - Portf√∂y √∂nerileri + grafikler
    - Performans takibi
    """
    
    def __init__(self):
        self.indicator = BISTSmartIndicator()
        self.visual_analyzer = VisualAnalyzer()
        self.dashboard_data = {}
        
        # Grafik ayarlarƒ±
        plt.style.use('seaborn-v0_8')
        plt.rcParams['figure.figsize'] = (16, 10)
        plt.rcParams['font.size'] = 10
        
    def create_comprehensive_dashboard(self, save_dir: str = "bist_dashboard") -> Dict:
        """
        Kapsamlƒ± dashboard olu≈üturur
        """
        try:
            logger.info("üé® BIST Smart Dashboard olu≈üturuluyor...")
            
            # Klas√∂r olu≈ütur
            import os
            if not os.path.exists(save_dir):
                os.makedirs(save_dir)
            
            # 1. T√ºm hisseleri analiz et
            analysis_results = self.indicator.analyze_all_stocks(period="6mo")
            
            if "error" in analysis_results:
                return {"error": analysis_results["error"]}
            
            # 2. Dashboard verilerini hazƒ±rla
            self.dashboard_data = analysis_results
            
            # 3. Ana dashboard grafiƒüi
            main_dashboard_path = f"{save_dir}/bist_main_dashboard.png"
            self._create_main_dashboard(main_dashboard_path)
            
            # 4. Top picks detay grafikleri
            top_picks_charts = self._create_top_picks_charts(save_dir)
            
            # 5. Portf√∂y daƒüƒ±lƒ±m grafiƒüi
            portfolio_chart_path = f"{save_dir}/portfolio_allocation.png"
            self._create_portfolio_chart(portfolio_chart_path)
            
            # 6. Performans trend grafiƒüi
            performance_chart_path = f"{save_dir}/performance_trends.png"
            self._create_performance_trends(performance_chart_path)
            
            return {
                "dashboard_created": True,
                "main_dashboard": main_dashboard_path,
                "top_picks_charts": top_picks_charts,
                "portfolio_chart": portfolio_chart_path,
                "performance_chart": performance_chart_path,
                "save_directory": save_dir,
                "analysis_date": datetime.now().isoformat(),
                "total_stocks": analysis_results["total_stocks"],
                "top_picks_count": len(analysis_results["top_picks"])
            }
            
        except Exception as e:
            logger.error(f"Dashboard olu≈üturma hatasƒ±: {e}")
            return {"error": str(e)}
    
    def _create_main_dashboard(self, save_path: str):
        """
        Ana dashboard grafiƒüi olu≈üturur
        """
        try:
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 16))
            
            # 1. Skor daƒüƒ±lƒ±mƒ± (Sol √ºst)
            self._plot_score_distribution(ax1)
            
            # 2. Risk seviyesi daƒüƒ±lƒ±mƒ± (Saƒü √ºst)
            self._plot_risk_distribution(ax2)
            
            # 3. Sinyal daƒüƒ±lƒ±mƒ± (Sol alt)
            self._plot_signal_distribution(ax3)
            
            # 4. Top picks skorlarƒ± (Saƒü alt)
            self._plot_top_picks_scores(ax4)
            
            # Ba≈ülƒ±k
            fig.suptitle('üöÄ BIST SMART INDICATOR - ANA DASHBOARD', 
                        fontsize=20, fontweight='bold', y=0.98)
            
            plt.tight_layout()
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            logger.info(f"‚úÖ Ana dashboard kaydedildi: {save_path}")
            
        except Exception as e:
            logger.error(f"Ana dashboard olu≈üturma hatasƒ±: {e}")
    
    def _plot_score_distribution(self, ax):
        """Skor daƒüƒ±lƒ±mƒ± grafiƒüi"""
        try:
            scores = [stock['scores']['composite'] for stock in self.dashboard_data['all_results']]
            symbols = [stock['symbol'] for stock in self.dashboard_data['all_results']]
            
            # Renk kodlamasƒ±
            colors = []
            for score in scores:
                if score >= 80:
                    colors.append('darkgreen')
                elif score >= 60:
                    colors.append('green')
                elif score >= 40:
                    colors.append('orange')
                else:
                    colors.append('red')
            
            bars = ax.barh(symbols, scores, color=colors, alpha=0.7)
            ax.set_xlabel('Kompozit Skor')
            ax.set_title('üìä Hisse Skor Daƒüƒ±lƒ±mƒ±')
            ax.grid(True, alpha=0.3)
            
            # Skor deƒüerlerini ekle
            for i, (bar, score) in enumerate(zip(bars, scores)):
                ax.text(score + 1, bar.get_y() + bar.get_height()/2, 
                       f'{score:.1f}', va='center', fontweight='bold')
            
        except Exception as e:
            logger.error(f"Skor daƒüƒ±lƒ±m grafiƒüi hatasƒ±: {e}")
    
    def _plot_risk_distribution(self, ax):
        """Risk seviyesi daƒüƒ±lƒ±mƒ± grafiƒüi"""
        try:
            risk_counts = {}
            for stock in self.dashboard_data['all_results']:
                risk = stock['risk_level']
                risk_counts[risk] = risk_counts.get(risk, 0) + 1
            
            # Renk kodlamasƒ±
            risk_colors = {
                'LOW': 'darkgreen',
                'MEDIUM-LOW': 'green',
                'MEDIUM': 'orange',
                'MEDIUM-HIGH': 'red',
                'HIGH': 'darkred'
            }
            
            risks = list(risk_counts.keys())
            counts = list(risk_counts.values())
            colors = [risk_colors.get(risk, 'gray') for risk in risks]
            
            wedges, texts, autotexts = ax.pie(counts, labels=risks, colors=colors, 
                                             autopct='%1.1f%%', startangle=90)
            ax.set_title('‚öñÔ∏è Risk Seviyesi Daƒüƒ±lƒ±mƒ±')
            
        except Exception as e:
            logger.error(f"Risk daƒüƒ±lƒ±m grafiƒüi hatasƒ±: {e}")
    
    def _plot_signal_distribution(self, ax):
        """Sinyal daƒüƒ±lƒ±mƒ± grafiƒüi"""
        try:
            signal_counts = {}
            for stock in self.dashboard_data['all_results']:
                signal = stock['recommendation']
                signal_counts[signal] = signal_counts.get(signal, 0) + 1
            
            # Renk kodlamasƒ±
            signal_colors = {
                'STRONG BUY': 'darkgreen',
                'BUY': 'green',
                'HOLD': 'orange',
                'SELL': 'red',
                'STRONG SELL': 'darkred'
            }
            
            signals = list(signal_counts.keys())
            counts = list(signal_counts.values())
            colors = [signal_colors.get(signal, 'gray') for signal in signals]
            
            bars = ax.bar(signals, counts, color=colors, alpha=0.7)
            ax.set_ylabel('Hisse Sayƒ±sƒ±')
            ax.set_title('üéØ Sinyal Daƒüƒ±lƒ±mƒ±')
            ax.grid(True, alpha=0.3)
            
            # Deƒüerleri ekle
            for bar, count in zip(bars, counts):
                ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                       str(count), ha='center', va='bottom', fontweight='bold')
            
        except Exception as e:
            logger.error(f"Sinyal daƒüƒ±lƒ±m grafiƒüi hatasƒ±: {e}")
    
    def _plot_top_picks_scores(self, ax):
        """Top picks skorlarƒ± grafiƒüi"""
        try:
            top_picks = self.dashboard_data['top_picks'][:5]
            
            symbols = [stock['symbol'] for stock in top_picks]
            composite_scores = [stock['scores']['composite'] for stock in top_picks]
            fundamental_scores = [stock['scores']['fundamental'] for stock in top_picks]
            technical_scores = [stock['scores']['technical'] for stock in top_picks]
            momentum_scores = [stock['scores']['momentum'] for stock in top_picks]
            
            x = np.arange(len(symbols))
            width = 0.2
            
            ax.bar(x - width*1.5, fundamental_scores, width, label='Fundamental', 
                   color='darkblue', alpha=0.7)
            ax.bar(x - width*0.5, technical_scores, width, label='Technical', 
                   color='green', alpha=0.7)
            ax.bar(x + width*0.5, momentum_scores, width, label='Momentum', 
                   color='orange', alpha=0.7)
            ax.bar(x + width*1.5, composite_scores, width, label='Composite', 
                   color='red', alpha=0.7)
            
            ax.set_xlabel('Hisse')
            ax.set_ylabel('Skor')
            ax.set_title('üèÜ Top 5 Hisse - Detaylƒ± Skor Analizi')
            ax.set_xticks(x)
            ax.set_xticklabels(symbols, rotation=45)
            ax.legend()
            ax.grid(True, alpha=0.3)
            
        except Exception as e:
            logger.error(f"Top picks skor grafiƒüi hatasƒ±: {e}")
    
    def _create_top_picks_charts(self, save_dir: str) -> List[str]:
        """
        Top picks i√ßin detay grafikleri olu≈üturur
        """
        try:
            chart_paths = []
            top_picks = self.dashboard_data['top_picks'][:5]
            
            for stock in top_picks:
                symbol = stock['symbol']
                logger.info(f"üé® {symbol} i√ßin detay grafikleri olu≈üturuluyor...")
                
                try:
                    # Veri √ßek
                    data = self.visual_analyzer.get_stock_data(symbol, period="6mo")
                    
                    if not data.empty:
                        # Candlestick grafiƒüi
                        candlestick_path = f"{save_dir}/{symbol}_candlestick.png"
                        self.visual_analyzer.create_candlestick_chart(
                            data, symbol, save_path=candlestick_path
                        )
                        
                        # Support/Resistance grafiƒüi
                        sr_path = f"{save_dir}/{symbol}_support_resistance.png"
                        self.visual_analyzer.create_support_resistance_chart(
                            data, symbol, save_path=sr_path
                        )
                        
                        chart_paths.extend([candlestick_path, sr_path])
                        
                except Exception as e:
                    logger.warning(f"{symbol} grafik olu≈üturma hatasƒ±: {e}")
                    continue
            
            return chart_paths
            
        except Exception as e:
            logger.error(f"Top picks grafikleri olu≈üturma hatasƒ±: {e}")
            return []
    
    def _create_portfolio_chart(self, save_path: str):
        """
        Portf√∂y daƒüƒ±lƒ±m grafiƒüi olu≈üturur
        """
        try:
            portfolio = self.indicator.get_portfolio_recommendations()
            
            if "error" in portfolio:
                logger.warning("Portf√∂y verisi bulunamadƒ±")
                return
            
            symbols = list(portfolio['portfolio'].keys())
            weights = [alloc['weight'] for alloc in portfolio['portfolio'].values()]
            risk_levels = [alloc['risk_level'] for alloc in portfolio['portfolio'].values()]
            
            # Risk bazlƒ± renk kodlamasƒ±
            risk_colors = {
                'LOW': 'darkgreen',
                'MEDIUM-LOW': 'green',
                'MEDIUM': 'orange',
                'MEDIUM-HIGH': 'red',
                'HIGH': 'darkred'
            }
            
            colors = [risk_colors.get(risk, 'gray') for risk in risk_levels]
            
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 8))
            
            # 1. Pasta grafik
            wedges, texts, autotexts = ax1.pie(weights, labels=symbols, colors=colors,
                                               autopct='%1.1f%%', startangle=90)
            ax1.set_title('üíº Portf√∂y Daƒüƒ±lƒ±mƒ± (%)', fontsize=14, fontweight='bold')
            
            # 2. Bar grafik
            bars = ax2.bar(symbols, weights, color=colors, alpha=0.7)
            ax2.set_ylabel('Aƒüƒ±rlƒ±k (%)')
            ax2.set_title('üìä Portf√∂y Aƒüƒ±rlƒ±klarƒ±', fontsize=14, fontweight='bold')
            ax2.grid(True, alpha=0.3)
            
            # Deƒüerleri ekle
            for bar, weight in zip(bars, weights):
                ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5,
                        f'{weight:.1f}%', ha='center', va='bottom', fontweight='bold')
            
            plt.tight_layout()
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            logger.info(f"‚úÖ Portf√∂y grafiƒüi kaydedildi: {save_path}")
            
        except Exception as e:
            logger.error(f"Portf√∂y grafiƒüi olu≈üturma hatasƒ±: {e}")
    
    def _create_performance_trends(self, save_path: str):
        """
        Performans trend grafiƒüi olu≈üturur
        """
        try:
            # Son 20 g√ºnl√ºk performans analizi
            performance_data = {}
            
            for stock in self.dashboard_data['top_picks'][:5]:
                symbol = stock['symbol']
                data = self.visual_analyzer.get_stock_data(symbol, period="1mo")
                
                if not data.empty and len(data) >= 20:
                    # Normalize edilmi≈ü fiyat (ilk g√ºn = 100)
                    normalized_price = (data['Close'] / data['Close'].iloc[0]) * 100
                    performance_data[symbol] = normalized_price
            
            if not performance_data:
                logger.warning("Performans verisi bulunamadƒ±")
                return
            
            # Grafik olu≈ütur
            fig, ax = plt.subplots(figsize=(16, 10))
            
            for symbol, prices in performance_data.items():
                ax.plot(prices.index, prices.values, label=symbol, linewidth=2, marker='o', markersize=4)
            
            ax.set_xlabel('Tarih')
            ax.set_ylabel('Normalize Edilmi≈ü Fiyat (ƒ∞lk G√ºn = 100)')
            ax.set_title('üìà Top 5 Hisse - 20 G√ºnl√ºk Performans Kar≈üƒ±la≈ütƒ±rmasƒ±', 
                        fontsize=14, fontweight='bold')
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            # X ekseni tarih formatƒ±
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d'))
            ax.xaxis.set_major_locator(mdates.DayLocator(interval=5))
            plt.xticks(rotation=45)
            
            plt.tight_layout()
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            logger.info(f"‚úÖ Performans trend grafiƒüi kaydedildi: {save_path}")
            
        except Exception as e:
            logger.error(f"Performans trend grafiƒüi olu≈üturma hatasƒ±: {e}")
    
    def generate_dashboard_report(self) -> str:
        """
        Dashboard raporu olu≈üturur
        """
        try:
            if not self.dashboard_data:
                return "‚ùå Hen√ºz dashboard olu≈üturulmamƒ±≈ü!"
            
            report = []
            report.append("üöÄ BIST SMART INDICATOR - DASHBOARD RAPORU")
            report.append("=" * 80)
            report.append(f"üìÖ Analiz Tarihi: {self.dashboard_data['analysis_date']}")
            report.append(f"üìä Toplam Hisse: {self.dashboard_data['total_stocks']}")
            report.append(f"‚úÖ Ba≈üarƒ±lƒ± Analiz: {self.dashboard_data['successful_analyses']}")
            
            # Performans istatistikleri
            if 'performance_stats' in self.dashboard_data:
                stats = self.dashboard_data['performance_stats']
                report.append(f"\nüìà PERFORMANS ƒ∞STATƒ∞STƒ∞KLERƒ∞:")
                report.append(f"   Ortalama Skor: {stats.get('average_score', 0):.1f}")
                report.append(f"   Medyan Skor: {stats.get('median_score', 0):.1f}")
                report.append(f"   Min Skor: {stats.get('min_score', 0):.1f}")
                report.append(f"   Max Skor: {stats.get('max_score', 0):.1f}")
            
            # Top picks
            report.append(f"\nüèÜ TOP {len(self.dashboard_data['top_picks'])} Hƒ∞SSE:")
            report.append("-" * 80)
            for i, stock in enumerate(self.dashboard_data['top_picks'], 1):
                report.append(f"{i:2d}. {stock['symbol']:<10} | {stock['grade']:>3} | "
                            f"{stock['recommendation']:<12} | Skor: {stock['scores']['composite']:>6.1f} | "
                            f"Risk: {stock['risk_level']:<12}")
            
            # Portf√∂y √∂nerileri
            portfolio = self.indicator.get_portfolio_recommendations()
            if "error" not in portfolio:
                report.append(f"\nüíº PORTF√ñY √ñNERƒ∞LERƒ∞:")
                report.append("-" * 80)
                for symbol, alloc in portfolio['portfolio'].items():
                    report.append(f"   {symbol:<10} | %{alloc['weight']:>5.1f} | "
                                f"{alloc['recommendation']:<12} | Risk: {alloc['risk_level']:<12}")
            
            return "\n".join(report)
            
        except Exception as e:
            logger.error(f"Dashboard rapor olu≈üturma hatasƒ±: {e}")
            return f"‚ùå Rapor olu≈üturma hatasƒ±: {e}"

# Test fonksiyonu
if __name__ == "__main__":
    print("üé® BIST SMART DASHBOARD - TEST BA≈ûLATILIYOR...")
    print("=" * 60)
    
    # Dashboard'u ba≈ülat
    dashboard = BISTSmartDashboard()
    
    # Kapsamlƒ± dashboard olu≈ütur
    print("üìä Kapsamlƒ± dashboard olu≈üturuluyor...")
    result = dashboard.create_comprehensive_dashboard()
    
    if "error" not in result:
        print("‚úÖ Dashboard ba≈üarƒ±yla olu≈üturuldu!")
        print(f"üìÅ Kayƒ±t Klas√∂r√º: {result['save_directory']}")
        print(f"üìä Toplam Hisse: {result['total_stocks']}")
        print(f"üèÜ Top Picks: {result['top_picks_count']}")
        
        # Rapor yazdƒ±r
        print("\n" + "="*80)
        report = dashboard.generate_dashboard_report()
        print(report)
        
        print(f"\nüé® GRAFƒ∞KLER:")
        print(f"   üìä Ana Dashboard: {result['main_dashboard']}")
        print(f"   üíº Portf√∂y Daƒüƒ±lƒ±mƒ±: {result['portfolio_chart']}")
        print(f"   üìà Performans Trendleri: {result['performance_chart']}")
        print(f"   üéØ Top Picks Grafikleri: {len(result['top_picks_charts'])} adet")
        
    else:
        print(f"‚ùå Dashboard hatasƒ±: {result['error']}")
    
    print("\n‚úÖ Test tamamlandƒ±!")
