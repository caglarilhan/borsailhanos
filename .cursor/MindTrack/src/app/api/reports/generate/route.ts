import { NextRequest, NextResponse } from 'next/server';
import puppeteer from 'puppeteer';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { type, data, filename } = body;

    if (!type || !data) {
      return NextResponse.json(
        { error: 'Type and data are required' },
        { status: 400 }
      );
    }

    let pdfBuffer: Buffer;
    let generatedFilename: string;

    switch (type) {
      case 'medical_report':
        pdfBuffer = await generateMedicalReportPDF(data);
        generatedFilename = filename || `medical-report-${Date.now()}.pdf`;
        break;

      case 'lab_results':
        pdfBuffer = await generateLabResultsPDF(data);
        generatedFilename = filename || `lab-results-${Date.now()}.pdf`;
        break;

      case 'prescription':
        pdfBuffer = await generatePrescriptionPDF(data);
        generatedFilename = filename || `prescription-${Date.now()}.pdf`;
        break;

      case 'appointment_summary':
        pdfBuffer = await generateAppointmentSummaryPDF(data);
        generatedFilename = filename || `appointment-summary-${Date.now()}.pdf`;
        break;

      case 'patient_summary':
        pdfBuffer = await generatePatientSummaryPDF(data);
        generatedFilename = filename || `patient-summary-${Date.now()}.pdf`;
        break;

      default:
        return NextResponse.json(
          { error: 'Invalid report type' },
          { status: 400 }
        );
    }

    return new NextResponse(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${generatedFilename}"`,
        'Content-Length': pdfBuffer.length.toString(),
      },
    });
  } catch (error) {
    console.error('PDF generation error:', error);
    return NextResponse.json(
      { error: 'Failed to generate PDF' },
      { status: 500 }
    );
  }
}

// Generate medical report PDF using Puppeteer
async function generateMedicalReportPDF(data: any): Promise<Buffer> {
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  try {
    const page = await browser.newPage();
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .header { text-align: center; margin-bottom: 30px; }
          .title { font-size: 24px; font-weight: bold; color: #2563eb; }
          .subtitle { font-size: 14px; color: #64748b; margin-top: 10px; }
          .section { margin-bottom: 25px; }
          .section-title { font-size: 18px; font-weight: bold; color: #2563eb; margin-bottom: 10px; }
          .info { margin-bottom: 8px; }
          .label { font-weight: bold; }
          .footer { position: fixed; bottom: 20px; left: 40px; font-size: 10px; color: #64748b; }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="title">Medical Report</div>
          <div class="subtitle">Generated on ${new Date().toLocaleDateString()}</div>
        </div>
        
        <div class="section">
          <div class="section-title">Patient Information</div>
          <div class="info"><span class="label">Name:</span> ${data.patient.name}</div>
          <div class="info"><span class="label">Date of Birth:</span> ${data.patient.dateOfBirth}</div>
          <div class="info"><span class="label">Medical Record Number:</span> ${data.patient.medicalRecordNumber}</div>
          <div class="info"><span class="label">Phone:</span> ${data.patient.phone}</div>
          <div class="info"><span class="label">Email:</span> ${data.patient.email}</div>
        </div>
        
        <div class="section">
          <div class="section-title">Report Details</div>
          ${data.diagnosis ? `<div class="info"><span class="label">Diagnosis:</span> ${data.diagnosis}</div>` : ''}
          ${data.treatment ? `<div class="info"><span class="label">Treatment:</span> ${data.treatment}</div>` : ''}
          ${data.notes ? `<div class="info"><span class="label">Notes:</span> ${data.notes}</div>` : ''}
        </div>
        
        <div class="footer">
          This report was generated by MindTrack Medical System
        </div>
      </body>
      </html>
    `;

    await page.setContent(html);
    const pdfBuffer = await page.pdf({
      format: 'A4',
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      }
    });

    return pdfBuffer;
  } finally {
    await browser.close();
  }
}

// Generate lab results PDF using Puppeteer
async function generateLabResultsPDF(data: any): Promise<Buffer> {
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  try {
    const page = await browser.newPage();
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .header { text-align: center; margin-bottom: 30px; }
          .title { font-size: 24px; font-weight: bold; color: #2563eb; }
          .subtitle { font-size: 14px; color: #64748b; margin-top: 10px; }
          .section { margin-bottom: 25px; }
          .section-title { font-size: 18px; font-weight: bold; color: #2563eb; margin-bottom: 10px; }
          .info { margin-bottom: 8px; }
          .label { font-weight: bold; }
          .result { margin-bottom: 15px; padding: 10px; border-left: 3px solid #2563eb; background-color: #f8f9fa; }
          .footer { position: fixed; bottom: 20px; left: 40px; font-size: 10px; color: #64748b; }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="title">Laboratory Results</div>
          <div class="subtitle">Generated on ${new Date().toLocaleDateString()}</div>
        </div>
        
        <div class="section">
          <div class="section-title">Patient Information</div>
          <div class="info"><span class="label">Name:</span> ${data.patient.name}</div>
          <div class="info"><span class="label">Medical Record Number:</span> ${data.patient.medicalRecordNumber}</div>
          <div class="info"><span class="label">Date of Birth:</span> ${data.patient.dateOfBirth}</div>
        </div>
        
        <div class="section">
          <div class="section-title">Laboratory Results</div>
          ${data.results.map((result: any, index: number) => `
            <div class="result">
              <div class="info"><span class="label">${index + 1}. Test:</span> ${result.testName}</div>
              <div class="info"><span class="label">Date:</span> ${result.date}</div>
              <div class="info"><span class="label">Status:</span> ${result.status}</div>
              ${result.results ? `<div class="info"><span class="label">Results:</span> ${result.results}</div>` : ''}
            </div>
          `).join('')}
        </div>
        
        <div class="footer">
          This report was generated by MindTrack Medical System
        </div>
      </body>
      </html>
    `;

    await page.setContent(html);
    const pdfBuffer = await page.pdf({
      format: 'A4',
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      }
    });

    return pdfBuffer;
  } finally {
    await browser.close();
  }
}

// Generate prescription PDF using Puppeteer
async function generatePrescriptionPDF(data: any): Promise<Buffer> {
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  try {
    const page = await browser.newPage();
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .header { text-align: center; margin-bottom: 30px; }
          .title { font-size: 24px; font-weight: bold; color: #2563eb; }
          .subtitle { font-size: 14px; color: #64748b; margin-top: 10px; }
          .section { margin-bottom: 25px; }
          .section-title { font-size: 18px; font-weight: bold; color: #2563eb; margin-bottom: 10px; }
          .info { margin-bottom: 8px; }
          .label { font-weight: bold; }
          .medication { margin-bottom: 15px; padding: 10px; border-left: 3px solid #059669; background-color: #f0fdf4; }
          .footer { position: fixed; bottom: 20px; left: 40px; font-size: 10px; color: #64748b; }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="title">Prescription</div>
          <div class="subtitle">Date: ${new Date().toLocaleDateString()}</div>
        </div>
        
        <div class="section">
          <div class="section-title">Patient Information</div>
          <div class="info"><span class="label">Name:</span> ${data.patient.name}</div>
          <div class="info"><span class="label">Date of Birth:</span> ${data.patient.dateOfBirth}</div>
          <div class="info"><span class="label">Medical Record Number:</span> ${data.patient.medicalRecordNumber}</div>
        </div>
        
        <div class="section">
          <div class="section-title">Prescription Details</div>
          ${data.medications.map((med: any, index: number) => `
            <div class="medication">
              <div class="info"><span class="label">${index + 1}. Medication:</span> ${med.name}</div>
              <div class="info"><span class="label">Dosage:</span> ${med.dosage}</div>
              <div class="info"><span class="label">Frequency:</span> ${med.frequency}</div>
              <div class="info"><span class="label">Instructions:</span> ${med.instructions}</div>
            </div>
          `).join('')}
        </div>
        
        <div class="section">
          <div class="section-title">Prescribing Physician</div>
          <div class="info"><span class="label">Doctor:</span> Dr. ${data.doctorName}</div>
          <div class="info"><span class="label">License Number:</span> ${data.licenseNumber || 'N/A'}</div>
        </div>
        
        <div class="footer">
          This prescription was generated by MindTrack Medical System
        </div>
      </body>
      </html>
    `;

    await page.setContent(html);
    const pdfBuffer = await page.pdf({
      format: 'A4',
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      }
    });

    return pdfBuffer;
  } finally {
    await browser.close();
  }
}

// Generate appointment summary PDF using Puppeteer
async function generateAppointmentSummaryPDF(data: any): Promise<Buffer> {
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  try {
    const page = await browser.newPage();
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .header { text-align: center; margin-bottom: 30px; }
          .title { font-size: 24px; font-weight: bold; color: #2563eb; }
          .subtitle { font-size: 14px; color: #64748b; margin-top: 10px; }
          .section { margin-bottom: 25px; }
          .section-title { font-size: 18px; font-weight: bold; color: #2563eb; margin-bottom: 10px; }
          .info { margin-bottom: 8px; }
          .label { font-weight: bold; }
          .footer { position: fixed; bottom: 20px; left: 40px; font-size: 10px; color: #64748b; }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="title">Appointment Summary</div>
          <div class="subtitle">Generated on ${new Date().toLocaleDateString()}</div>
        </div>
        
        <div class="section">
          <div class="section-title">Patient Information</div>
          <div class="info"><span class="label">Name:</span> ${data.patient.name}</div>
          <div class="info"><span class="label">Medical Record Number:</span> ${data.patient.medicalRecordNumber}</div>
        </div>
        
        <div class="section">
          <div class="section-title">Appointment Details</div>
          <div class="info"><span class="label">Date:</span> ${data.appointment.date}</div>
          <div class="info"><span class="label">Time:</span> ${data.appointment.time}</div>
          <div class="info"><span class="label">Doctor:</span> ${data.appointment.doctor}</div>
          <div class="info"><span class="label">Type:</span> ${data.appointment.type}</div>
          <div class="info"><span class="label">Status:</span> ${data.appointment.status}</div>
          ${data.appointment.notes ? `<div class="info"><span class="label">Notes:</span> ${data.appointment.notes}</div>` : ''}
        </div>
        
        <div class="footer">
          This summary was generated by MindTrack Medical System
        </div>
      </body>
      </html>
    `;

    await page.setContent(html);
    const pdfBuffer = await page.pdf({
      format: 'A4',
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      }
    });

    return pdfBuffer;
  } finally {
    await browser.close();
  }
}

// Generate patient summary PDF using Puppeteer
async function generatePatientSummaryPDF(data: any): Promise<Buffer> {
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  try {
    const page = await browser.newPage();
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .header { text-align: center; margin-bottom: 30px; }
          .title { font-size: 24px; font-weight: bold; color: #2563eb; }
          .subtitle { font-size: 14px; color: #64748b; margin-top: 10px; }
          .section { margin-bottom: 25px; }
          .section-title { font-size: 18px; font-weight: bold; color: #2563eb; margin-bottom: 10px; }
          .info { margin-bottom: 8px; }
          .label { font-weight: bold; }
          .footer { position: fixed; bottom: 20px; left: 40px; font-size: 10px; color: #64748b; }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="title">Patient Summary</div>
          <div class="subtitle">Generated on ${new Date().toLocaleDateString()}</div>
        </div>
        
        <div class="section">
          <div class="section-title">Patient Information</div>
          <div class="info"><span class="label">Name:</span> ${data.patient.name}</div>
          <div class="info"><span class="label">Date of Birth:</span> ${data.patient.dateOfBirth}</div>
          <div class="info"><span class="label">Medical Record Number:</span> ${data.patient.medicalRecordNumber}</div>
          <div class="info"><span class="label">Phone:</span> ${data.patient.phone}</div>
          <div class="info"><span class="label">Email:</span> ${data.patient.email}</div>
        </div>
        
        <div class="section">
          <div class="section-title">Medical History</div>
          ${data.medicalHistory ? `<div class="info">${data.medicalHistory}</div>` : '<div class="info">No medical history recorded</div>'}
        </div>
        
        <div class="section">
          <div class="section-title">Current Medications</div>
          ${data.medications && data.medications.length > 0 ? 
            data.medications.map((med: any) => `<div class="info">• ${med.name} - ${med.dosage} (${med.frequency})</div>`).join('') :
            '<div class="info">No current medications</div>'
          }
        </div>
        
        <div class="section">
          <div class="section-title">Allergies</div>
          ${data.allergies && data.allergies.length > 0 ? 
            data.allergies.map((allergy: any) => `<div class="info">• ${allergy}</div>`).join('') :
            '<div class="info">No known allergies</div>'
          }
        </div>
        
        <div class="footer">
          This summary was generated by MindTrack Medical System
        </div>
      </body>
      </html>
    `;

    await page.setContent(html);
    const pdfBuffer = await page.pdf({
      format: 'A4',
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      }
    });

    return pdfBuffer;
  } finally {
    await browser.close();
  }
}



