-- PDF reports schema for Supabase
-- This file contains tables and policies for PDF report generation and tracking

-- Report templates table
CREATE TABLE IF NOT EXISTS report_templates (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  type VARCHAR(50) NOT NULL, -- medical_report, lab_results, prescription, etc.
  title VARCHAR(200) NOT NULL,
  description TEXT,
  template_html TEXT NOT NULL,
  template_css TEXT,
  variables JSONB, -- Available variables for template
  is_active BOOLEAN DEFAULT true,
  created_by UUID NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for report templates
CREATE INDEX IF NOT EXISTS idx_report_templates_type ON report_templates(type);
CREATE INDEX IF NOT EXISTS idx_report_templates_is_active ON report_templates(is_active);
CREATE INDEX IF NOT EXISTS idx_report_templates_created_by ON report_templates(created_by);

-- Insert default report templates
INSERT INTO report_templates (name, type, title, description, template_html, variables) VALUES
(
  'Default Medical Report',
  'medical_report',
  'Medical Report',
  'Standard medical report template',
  '<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <style>
    body { font-family: Arial, sans-serif; margin: 40px; }
    .header { text-align: center; margin-bottom: 30px; }
    .title { font-size: 24px; font-weight: bold; color: #2563eb; }
    .subtitle { font-size: 14px; color: #64748b; margin-top: 10px; }
    .section { margin-bottom: 25px; }
    .section-title { font-size: 18px; font-weight: bold; color: #2563eb; margin-bottom: 10px; }
    .info { margin-bottom: 8px; }
    .label { font-weight: bold; }
    .footer { position: fixed; bottom: 20px; left: 40px; font-size: 10px; color: #64748b; }
  </style>
</head>
<body>
  <div class="header">
    <div class="title">{{title}}</div>
    <div class="subtitle">Generated on {{generation_date}}</div>
  </div>
  
  <div class="section">
    <div class="section-title">Patient Information</div>
    <div class="info"><span class="label">Name:</span> {{patient_name}}</div>
    <div class="info"><span class="label">Date of Birth:</span> {{patient_dob}}</div>
    <div class="info"><span class="label">Medical Record Number:</span> {{patient_mrn}}</div>
  </div>
  
  <div class="section">
    <div class="section-title">Report Details</div>
    {{#if diagnosis}}<div class="info"><span class="label">Diagnosis:</span> {{diagnosis}}</div>{{/if}}
    {{#if treatment}}<div class="info"><span class="label">Treatment:</span> {{treatment}}</div>{{/if}}
    {{#if notes}}<div class="info"><span class="label">Notes:</span> {{notes}}</div>{{/if}}
  </div>
  
  <div class="footer">
    This report was generated by MindTrack Medical System
  </div>
</body>
</html>',
  '["title", "generation_date", "patient_name", "patient_dob", "patient_mrn", "diagnosis", "treatment", "notes"]'::jsonb
),
(
  'Default Lab Results',
  'lab_results',
  'Laboratory Results',
  'Standard lab results template',
  '<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <style>
    body { font-family: Arial, sans-serif; margin: 40px; }
    .header { text-align: center; margin-bottom: 30px; }
    .title { font-size: 24px; font-weight: bold; color: #2563eb; }
    .subtitle { font-size: 14px; color: #64748b; margin-top: 10px; }
    .section { margin-bottom: 25px; }
    .section-title { font-size: 18px; font-weight: bold; color: #2563eb; margin-bottom: 10px; }
    .info { margin-bottom: 8px; }
    .label { font-weight: bold; }
    .result { margin-bottom: 15px; padding: 10px; border-left: 3px solid #2563eb; background-color: #f8f9fa; }
    .footer { position: fixed; bottom: 20px; left: 40px; font-size: 10px; color: #64748b; }
  </style>
</head>
<body>
  <div class="header">
    <div class="title">{{title}}</div>
    <div class="subtitle">Generated on {{generation_date}}</div>
  </div>
  
  <div class="section">
    <div class="section-title">Patient Information</div>
    <div class="info"><span class="label">Name:</span> {{patient_name}}</div>
    <div class="info"><span class="label">Medical Record Number:</span> {{patient_mrn}}</div>
  </div>
  
  <div class="section">
    <div class="section-title">Laboratory Results</div>
    {{#each results}}
    <div class="result">
      <div class="info"><span class="label">{{@index}}. Test:</span> {{test_name}}</div>
      <div class="info"><span class="label">Date:</span> {{date}}</div>
      <div class="info"><span class="label">Status:</span> {{status}}</div>
      {{#if results}}<div class="info"><span class="label">Results:</span> {{results}}</div>{{/if}}
    </div>
    {{/each}}
  </div>
  
  <div class="footer">
    This report was generated by MindTrack Medical System
  </div>
</body>
</html>',
  '["title", "generation_date", "patient_name", "patient_mrn", "results"]'::jsonb
),
(
  'Default Prescription',
  'prescription',
  'Prescription',
  'Standard prescription template',
  '<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <style>
    body { font-family: Arial, sans-serif; margin: 40px; }
    .header { text-align: center; margin-bottom: 30px; }
    .title { font-size: 24px; font-weight: bold; color: #2563eb; }
    .subtitle { font-size: 14px; color: #64748b; margin-top: 10px; }
    .section { margin-bottom: 25px; }
    .section-title { font-size: 18px; font-weight: bold; color: #2563eb; margin-bottom: 10px; }
    .info { margin-bottom: 8px; }
    .label { font-weight: bold; }
    .medication { margin-bottom: 15px; padding: 10px; border-left: 3px solid #059669; background-color: #f0fdf4; }
    .footer { position: fixed; bottom: 20px; left: 40px; font-size: 10px; color: #64748b; }
  </style>
</head>
<body>
  <div class="header">
    <div class="title">{{title}}</div>
    <div class="subtitle">Date: {{prescription_date}}</div>
  </div>
  
  <div class="section">
    <div class="section-title">Patient Information</div>
    <div class="info"><span class="label">Name:</span> {{patient_name}}</div>
    <div class="info"><span class="label">Date of Birth:</span> {{patient_dob}}</div>
    <div class="info"><span class="label">Medical Record Number:</span> {{patient_mrn}}</div>
  </div>
  
  <div class="section">
    <div class="section-title">Prescription Details</div>
    {{#each medications}}
    <div class="medication">
      <div class="info"><span class="label">{{@index}}. Medication:</span> {{name}}</div>
      <div class="info"><span class="label">Dosage:</span> {{dosage}}</div>
      <div class="info"><span class="label">Frequency:</span> {{frequency}}</div>
      <div class="info"><span class="label">Instructions:</span> {{instructions}}</div>
    </div>
    {{/each}}
  </div>
  
  <div class="section">
    <div class="section-title">Prescribing Physician</div>
    <div class="info"><span class="label">Doctor:</span> Dr. {{doctor_name}}</div>
    <div class="info"><span class="label">License Number:</span> {{license_number}}</div>
  </div>
  
  <div class="footer">
    This prescription was generated by MindTrack Medical System
  </div>
</body>
</html>',
  '["title", "prescription_date", "patient_name", "patient_dob", "patient_mrn", "medications", "doctor_name", "license_number"]'::jsonb
)
ON CONFLICT DO NOTHING;

-- Generated reports table
CREATE TABLE IF NOT EXISTS generated_reports (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL,
  patient_id UUID,
  template_id UUID REFERENCES report_templates(id),
  report_type VARCHAR(50) NOT NULL,
  title VARCHAR(200) NOT NULL,
  filename VARCHAR(200) NOT NULL,
  file_path VARCHAR(500),
  file_size BIGINT,
  generation_method VARCHAR(20) NOT NULL, -- client_side, server_side
  data JSONB NOT NULL, -- Report data used for generation
  status VARCHAR(20) DEFAULT 'completed', -- pending, completed, failed
  error_message TEXT,
  generated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  expires_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for generated reports
CREATE INDEX IF NOT EXISTS idx_generated_reports_user_id ON generated_reports(user_id);
CREATE INDEX IF NOT EXISTS idx_generated_reports_patient_id ON generated_reports(patient_id);
CREATE INDEX IF NOT EXISTS idx_generated_reports_template_id ON generated_reports(template_id);
CREATE INDEX IF NOT EXISTS idx_generated_reports_report_type ON generated_reports(report_type);
CREATE INDEX IF NOT EXISTS idx_generated_reports_status ON generated_reports(status);
CREATE INDEX IF NOT EXISTS idx_generated_reports_generated_at ON generated_reports(generated_at);

-- Report generation logs table
CREATE TABLE IF NOT EXISTS report_generation_logs (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL,
  report_id UUID REFERENCES generated_reports(id) ON DELETE CASCADE,
  action VARCHAR(50) NOT NULL, -- generate, download, view, delete
  ip_address INET,
  user_agent TEXT,
  session_id VARCHAR(100),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for report generation logs
CREATE INDEX IF NOT EXISTS idx_report_generation_logs_user_id ON report_generation_logs(user_id);
CREATE INDEX IF NOT EXISTS idx_report_generation_logs_report_id ON report_generation_logs(report_id);
CREATE INDEX IF NOT EXISTS idx_report_generation_logs_action ON report_generation_logs(action);
CREATE INDEX IF NOT EXISTS idx_report_generation_logs_created_at ON report_generation_logs(created_at);

-- Report sharing table
CREATE TABLE IF NOT EXISTS report_sharing (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  report_id UUID NOT NULL REFERENCES generated_reports(id) ON DELETE CASCADE,
  shared_by UUID NOT NULL,
  shared_with UUID,
  shared_with_email VARCHAR(255),
  permission VARCHAR(20) DEFAULT 'view', -- view, download
  access_token VARCHAR(100) UNIQUE,
  expires_at TIMESTAMP WITH TIME ZONE,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for report sharing
CREATE INDEX IF NOT EXISTS idx_report_sharing_report_id ON report_sharing(report_id);
CREATE INDEX IF NOT EXISTS idx_report_sharing_shared_by ON report_sharing(shared_by);
CREATE INDEX IF NOT EXISTS idx_report_sharing_shared_with ON report_sharing(shared_with);
CREATE INDEX IF NOT EXISTS idx_report_sharing_access_token ON report_sharing(access_token);

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers to automatically update updated_at
CREATE TRIGGER update_report_templates_updated_at 
  BEFORE UPDATE ON report_templates 
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_report_sharing_updated_at 
  BEFORE UPDATE ON report_sharing 
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- RLS Policies for report_templates
ALTER TABLE report_templates ENABLE ROW LEVEL SECURITY;

-- Users can view active templates
CREATE POLICY "Users can view active templates" ON report_templates
  FOR SELECT USING (is_active = true);

-- RLS Policies for generated_reports
ALTER TABLE generated_reports ENABLE ROW LEVEL SECURITY;

-- Users can view their own reports
CREATE POLICY "Users can view own reports" ON generated_reports
  FOR SELECT USING (auth.uid() = user_id);

-- Users can insert their own reports
CREATE POLICY "Users can insert own reports" ON generated_reports
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can update their own reports
CREATE POLICY "Users can update own reports" ON generated_reports
  FOR UPDATE USING (auth.uid() = user_id);

-- Users can delete their own reports
CREATE POLICY "Users can delete own reports" ON generated_reports
  FOR DELETE USING (auth.uid() = user_id);

-- RLS Policies for report_generation_logs
ALTER TABLE report_generation_logs ENABLE ROW LEVEL SECURITY;

-- Users can view logs for their own reports
CREATE POLICY "Users can view own report logs" ON report_generation_logs
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM generated_reports 
      WHERE generated_reports.id = report_generation_logs.report_id 
      AND generated_reports.user_id = auth.uid()
    )
  );

-- Users can insert logs for their own reports
CREATE POLICY "Users can insert own report logs" ON report_generation_logs
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM generated_reports 
      WHERE generated_reports.id = report_generation_logs.report_id 
      AND generated_reports.user_id = auth.uid()
    )
  );

-- RLS Policies for report_sharing
ALTER TABLE report_sharing ENABLE ROW LEVEL SECURITY;

-- Users can view shares for their own reports
CREATE POLICY "Users can view own report shares" ON report_sharing
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM generated_reports 
      WHERE generated_reports.id = report_sharing.report_id 
      AND generated_reports.user_id = auth.uid()
    )
  );

-- Users can create shares for their own reports
CREATE POLICY "Users can create shares for own reports" ON report_sharing
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM generated_reports 
      WHERE generated_reports.id = report_sharing.report_id 
      AND generated_reports.user_id = auth.uid()
    )
  );

-- Users can update shares for their own reports
CREATE POLICY "Users can update own report shares" ON report_sharing
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM generated_reports 
      WHERE generated_reports.id = report_sharing.report_id 
      AND generated_reports.user_id = auth.uid()
    )
  );

-- Users can delete shares for their own reports
CREATE POLICY "Users can delete own report shares" ON report_sharing
  FOR DELETE USING (
    EXISTS (
      SELECT 1 FROM generated_reports 
      WHERE generated_reports.id = report_sharing.report_id 
      AND generated_reports.user_id = auth.uid()
    )
  );

-- Function to create report
CREATE OR REPLACE FUNCTION create_report(
  p_user_id UUID,
  p_patient_id UUID,
  p_template_id UUID,
  p_report_type VARCHAR(50),
  p_title VARCHAR(200),
  p_filename VARCHAR(200),
  p_generation_method VARCHAR(20),
  p_data JSONB,
  p_expires_at TIMESTAMP WITH TIME ZONE DEFAULT NULL
)
RETURNS UUID AS $$
DECLARE
  v_report_id UUID;
BEGIN
  INSERT INTO generated_reports (
    user_id, patient_id, template_id, report_type, title, filename,
    generation_method, data, expires_at
  ) VALUES (
    p_user_id, p_patient_id, p_template_id, p_report_type, p_title, p_filename,
    p_generation_method, p_data, p_expires_at
  ) RETURNING id INTO v_report_id;
  
  RETURN v_report_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to log report action
CREATE OR REPLACE FUNCTION log_report_action(
  p_user_id UUID,
  p_report_id UUID,
  p_action VARCHAR(50),
  p_ip_address INET DEFAULT NULL,
  p_user_agent TEXT DEFAULT NULL,
  p_session_id VARCHAR(100) DEFAULT NULL
)
RETURNS UUID AS $$
DECLARE
  v_log_id UUID;
BEGIN
  INSERT INTO report_generation_logs (
    user_id, report_id, action, ip_address, user_agent, session_id
  ) VALUES (
    p_user_id, p_report_id, p_action, p_ip_address, p_user_agent, p_session_id
  ) RETURNING id INTO v_log_id;
  
  RETURN v_log_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

